
/** *********************************************************************************************
 * File name: ClientView.java
 * Author: Soojin Han, 040698591
 * Course: CST8221 - JAP, Lab Section: 302
 * Assignment: 2 part 2
 * Professor: Daniel Cormier
 * Due Date: 2020 August 7
 * Purpose: The purpose of the class is to connect with server socket and interact with buttons
 *********************************************************************************************** */
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * This class is responsible for handling all activities generated by GUI
 *
 * @author Soojin Han
 * @version 1.1
 * @since 1.8.0_251
 */
public class ClientView extends javax.swing.JPanel {

    /**
     * thread to be run
     */
    private Thread thread = null;
    /**
     * dynamic message storage
     */
    private BlockingQueue<String> dynamicMsg = null;
    /**
     * runner class to run thread information
     */
    private ServerSocketRunner sendSocket = null;
    /**
     * controlling access to a shared resource by multiple threads
     */
    private Lock clientLock;
    /**
     * suspend execution until notified by another thread
     */
    private Condition condition;

    /**
     * Creates new form ClientVieww
     */
    public ClientView() {
        initComponents();
        clientLock = new ReentrantLock();
        condition = clientLock.newCondition();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestPanel = new javax.swing.JPanel();
        requestText = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        compPanel = new javax.swing.JPanel();
        hostLabel = new javax.swing.JLabel();
        hostText = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portBox = new javax.swing.JComboBox<>();
        connectButton = new javax.swing.JButton();
        displayPanel = new javax.swing.JScrollPane();
        displayText = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(600, 550));

        requestPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 9), "CLIENT REQUEST"));
        requestPanel.setName("Connection"); // NOI18N

        requestText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        requestText.setText("Type server request command");
        requestText.setMargin(new java.awt.Insets(0, 0, 0, 0));
        requestText.setMinimumSize(null);
        requestText.setPreferredSize(new java.awt.Dimension(177, 23));
        requestText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTextActionPerformed(evt);
            }
        });

        sendButton.setMnemonic(KeyEvent.VK_S);
        sendButton.setText("SEND");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout requestPanelLayout = new javax.swing.GroupLayout(requestPanel);
        requestPanel.setLayout(requestPanelLayout);
        requestPanelLayout.setHorizontalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requestPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(requestText, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        requestPanelLayout.setVerticalGroup(
            requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(requestPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(requestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(requestText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        compPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 9), "CONNECTION"));
        compPanel.setName("Connection"); // NOI18N
        compPanel.setPreferredSize(new java.awt.Dimension(560, 88));
        compPanel.setRequestFocusEnabled(false);

        hostLabel.setBackground(new java.awt.Color(255, 255, 255));
        hostLabel.setDisplayedMnemonic(KeyEvent.VK_H);
        hostLabel.setText("Host:");
        hostLabel.setAlignmentY(0.0F);
        hostLabel.setPreferredSize(new java.awt.Dimension(40, 25));

        //org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, hostText, org.jdesktop.beansbinding.ObjectProperty.create(), hostLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        

        hostText.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        hostText.setText("localhost");
        hostText.setCaretPosition(0);
        hostText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        hostText.setMargin(new java.awt.Insets(0, 5, 0, 0));
        hostText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hostTextFocusGained(evt);
            }
        });
        hostText.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                hostTextComponentResized(evt);
            }
        });
        hostText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostTextActionPerformed(evt);
            }
        });

        portLabel.setDisplayedMnemonic(KeyEvent.VK_P);
        portLabel.setText("Port:");
        portLabel.setPreferredSize(new java.awt.Dimension(40, 25));

        //binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, portBox, org.jdesktop.beansbinding.ObjectProperty.create(), portLabel, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
      

        portBox.setEditable(true);
        portBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ","8088", "65000", "65535" }));

        connectButton.setBackground(Color.RED);
        connectButton.setMnemonic(KeyEvent.VK_C);
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout compPanelLayout = new javax.swing.GroupLayout(compPanel);
        compPanel.setLayout(compPanelLayout);
        compPanelLayout.setHorizontalGroup(
            compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(compPanelLayout.createSequentialGroup()
                        .addComponent(portBox, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton))
                    .addComponent(hostText, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        compPanelLayout.setVerticalGroup(
            compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compPanelLayout.createSequentialGroup()
                .addGroup(compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(compPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(portBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(connectButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 9), "DISPLAY", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        displayPanel.setAutoscrolls(true);
        displayPanel.setMinimumSize(null);
        displayPanel.setName(""); // NOI18N

        displayText.setEditable(false);
        displayText.setColumns(40);
        displayText.setRows(16);
        displayPanel.setViewportView(displayText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(requestPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(compPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 580, Short.MAX_VALUE))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(compPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(requestPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        //bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void requestTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestTextActionPerformed

    private void hostTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostTextFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_hostTextFocusGained

    private void hostTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hostTextActionPerformed

    private void hostTextComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_hostTextComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_hostTextComponentResized

    /**
     * Connect button sends port number and host information
     *
     * @param evt click event
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        String host = null;//localhost
        int portNum = 0;//port number
        Socket socket = null;//socket to be used 
        host = hostText.getText();//getting localhost text
        clientLock.lock();

        if (host.length() != 0) {

            //localhost name is not empty
            try {
                portNum = Integer.parseInt(portBox.getSelectedItem().toString());
            } catch (Exception e) {
                portNum = 65535;
            }

            //instantiating socket and throw and error if it fails
            try {
                socket = new Socket();
                socket.connect(new InetSocketAddress(InetAddress.getByName(host), portNum), 10000);
                //displaying socket address, port numberm and local port
                displayText.append("Connected to Socket[addr=" + socket.getInetAddress() + ",port=" + socket.getPort()
                        + ",localport=" + socket.getLocalPort() + "\n");
            } catch (UnknownHostException e) {
                displayText.append("CLIENT>ERROR: Unkown Host.\n");
                connectButton.setEnabled(true);
            } catch (IOException e) {
                displayText.append("CLIENT>ERROR: Connection refused: server is not avaliable. Check port or restart server.\n");
                connectButton.setEnabled(true);
            } catch (Exception e) {
                System.out.println("exception found");
                connectButton.setEnabled(true);
            }

            //Creates a queue that orders elements FIFO (first-in-first-out)
            dynamicMsg = new ArrayBlockingQueue<String>(200);
            sendSocket = new ServerSocketRunner(socket, dynamicMsg);
            thread = new Thread(sendSocket);
            thread.start();
        }

        clientLock.unlock();
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * send button sends request arguments
     *
     * @param evt click event
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        clientLock.lock();

        //checking for empty request text
        if (requestText.getText().isEmpty() || requestText == null) {
            System.out.println("request is empty");
            return;
        }

        try {
            //sending request text to the msgStore 
            sendSocket.msgStore.put(requestText.getText());
        } catch (Exception e) {
            displayText.append("ERROR: Unrecognized command.");
        }

        clientLock.unlock();
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * This class is responsible for handling all activities generated by socket
     *
     * @author Soojin Han
     * @version 1.0
     * @since 1.8.0_251
     */
    private class ServerSocketRunner implements Runnable {

        private BlockingQueue<String> msgStore = null;//storing dyanmic request messages
        private Socket socket = null;
        InputStream inStream = null;//input stream
        OutputStream outStream;//output stream
        Scanner in = null;
        PrintWriter out = null;
        String msg = null;

        /**
         * defining values for msgStore and socket
         *
         * @param socket socket
         * @param str message sent to msgStore
         */
        public ServerSocketRunner(Socket socket, BlockingQueue<String> str) {
            this.msgStore = str;
            this.socket = socket;
        }

        /**
         * thread runner method
         */
        public void run() {

            try {//getting input and output stream
                inStream = socket.getInputStream();
                outStream = socket.getOutputStream();
                in = new Scanner(inStream);
                out = new PrintWriter(outStream, true /* autoFlush */);
                connectButton.setEnabled(false);//making connect button not accessible
                connectButton.setBackground(Color.BLUE);
                sendButton.setEnabled(true);
            } catch (IOException e) {
                return;
            } catch (Exception e) {
                System.out.println("Invalid connection. ");
            }

            while (true) {
                try {
                    //getting message for the msgStore
                    String clientMessage = msgStore.take();
                    out.println(clientMessage);
                    msg = in.nextLine();

                    if (msg == null) {//no message input
                        System.out.println("no string to print");
                        break;
                    }

                    if (msg.contains("SERVER>CLD:")) {//clear display
                        displayText.setText("");
                    } else if (msg.contains("SERVER>Connection closed.")) {
                        displayText.append("SERVER>Connection closed.");
                        break;
                    } else if (msg.contains("SERVER>Available Services:")) {
                        displayText.append("SERVER>Available Services:\nend\necho\ntime\ndate\nhelp\ncld\n\n");

                        for (int i = 0; i < 7; i++) {//getting lines for help function 
                            msg = in.nextLine();
                        }

                    } else {
                        displayText.append(msg + "\n");
                    }

                } catch (Exception e) {
                    System.out.println("Unexpected error");
                    break;
                }

            }

            displayText.append("\nClient>Connection closed\n");//clising client connection

            try {//release resources

                if (out != null) {
                    out.flush();
                    out.close();
                }

                if (in != null) {
                    in.close();
                }

                if (socket != null) {
                    socket.close();
                }

            } catch (IOException e) {
                System.out.println("Unable to close I/O");
            } catch (Exception e) {
                System.out.println("Unable to release resources");
            }

            sendButton.setEnabled(false);//setting send button enabled
            connectButton.setEnabled(true);
            connectButton.setBackground(Color.red);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel compPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JScrollPane displayPanel;
    private javax.swing.JTextArea displayText;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostText;
    private javax.swing.JComboBox<String> portBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JPanel requestPanel;
    private javax.swing.JTextField requestText;
    private javax.swing.JButton sendButton;
    
    // End of variables declaration//GEN-END:variables
}
